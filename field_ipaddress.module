<?php

/**
 * Implements hook_field_info().
 */
function field_ipaddress_field_info() {
  return array(
    'field_ipaddress' => array(
      'label' => t('IP Address'),
      'description' => t('Stores a single IP address, or range of IP addresses.'),
      'default_widget' => 'field_ipaddress_range',
      'default_formatter' => 'field_ipaddress_list',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function field_ipaddress_field_is_empty($item, $field) {
  return empty($item['network']);
}

/**
 * Implements hook_field_formatter_info().
 */
function field_ipaddress_field_formatter_info() {
  return array(
    'field_ipaddress_list' => array(
      'label' => t('List'),
      'field types' => array('field_ipaddress'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function field_ipaddress_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  // This is a hack: http://drupal.org/node/1308186
  if (isset($items['network'])) { $items = array(array('network' => $items['network'])); }

  foreach ($items as $delta => $item) {
    if (!empty($item['network'])) {
      // Are we doing multi-value or single value processing?
      if ($field['cardinality'] == 1) {
        $networks = array($item['network']);
      } else {
        $networks = explode("\n", $item['network']);
        $networks = array_map('trim', $networks);
      }
      foreach ($networks as $network) {
        if (!field_ipaddress_network2range($network)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'field_ipaddress_invalid',
            'message' => t('Invalid IP range or address: @address.', array('@address' => $network)),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function field_ipaddress_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] === 'field_ipaddress') {
    foreach ($items as $delta => $item) {
      if (!empty($item)) {
        $networks = explode("\n", $item);
        $networks = array_map('trim', $networks);
        foreach ($networks as $network) {
          list($startip, $endip) = field_ipaddress_network2range($network);
          $newitems[] = array(
            'start' => ip2long($startip),
            'end' => ip2long($endip),
          );
        }
      }
    }
  }
  $items = $newitems;
}

/**
 * Implements hook_field_formatter_view().
 */
function field_ipaddress_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'field_ipaddress_list':
      $networks = array();
      foreach ($items as $delta => $item) {
        if (!empty($item)) {
          $networks[] = field_ipaddress_long2network($item['start'], $item['end']);
        }
      }
      if ($field['cardinality'] == 1) {
        $element[$delta] = array(
          '#markup' => $networks[0],
        );
      } else {
        $element[$delta] = array(
          '#theme' => 'item_list',
          '#items' => $networks,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function field_ipaddress_field_widget_info() {
  return array(
    'field_ipaddress_range' => array(
      'label' => t('Range input'),
      'field types' => array('field_ipaddress'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_ipaddress_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'field_ipaddress_range':

      // Define the widget
      $widget = array(
        '#type' => 'textfield',
        '#delta' => $delta,
        '#title' => $instance['label'],
        '#description' => $instance['description'],
        '#default_value' => '',
        '#size' => 30,
      );

      // Add the values to the form
      $addresses = array();
      foreach ($items as $delta => $item) {
        if (!empty($item['start']) && !empty($item['end'])
            && $address = field_ipaddress_long2network($item['start'], $item['end'])) {
          $addresses[] = $address;
        }
      }

      // Resize for multi-value fields
      if ($field['cardinality'] != 1) {
        $widget['#type'] = 'textarea';
        $widget['#rows'] = ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) ? 5 : $field['cardinality'];
      }

      // Add the default values
      if (!empty($addresses)) {
        $widget['#default_value'] = implode("\n", $addresses);
      }
      break;
  }

  $element['network'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function field_ipaddress_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_ipaddress_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Convert a start address and end address (as longs) into a smaller human readable string.
 *
 * @param int $start The start address as a long
 * @param int $end The end address as a long
 * @return string A start and end range as the small formatted string
 * @example
 *   $s=1869573999, $e=1869574110 => 111.111.111.111-222
 */
function field_ipaddress_long2network($start, $end) {
  if ($start === $end) {
    $output = long2ip($start);
  } else {
    $s = explode('.', long2ip($start));
    $e = explode('.', long2ip($end));
    if ($s[0] === $e[0] && $s[1] === $e[1] && $s[2] === $e[2]) {
      if ($s[3] === '0' && $e[3] === '255') {
        $s[3] = '*';
        $output = implode('.', $s);
      } else {
        $s[3] = sprintf('%s-%s', $s[3], $e[3]);
        $output = implode('.', $s);
      }
    } else {
      $output = long2ip($start) .' - '. long2ip($end);
    }
  }

  return $output;
}

/**
 * Take human input and return the dotted quad start and end range.
 *
 * @param input $string An IP range.
 * @return array Start and end addresses in dotted quad format, else FALSE.
 * @example
 *   "111.111.111.*" => array("111.111.111.0", "111.111.111.255")
 *   "111.111.111.111-222" => array("111.111.111.111", "111.111.111.222")
 */
function field_ipaddress_network2range($network) {
  $star = strpos($network, '*');
  $dash = strpos($network, '-');

  if (ctype_alpha($network[strlen($network)-1])) {
    // Hostname conversion
    $start = $end = gethostbyname($network);
    if ($start === $network) {
      return FALSE;
    }
  }
  else {
    // Simple validation
    if ($star === false && $dash === false) {
      $res   = long2ip(ip2long($network));
      $start = $end = $res;
      if ($res === '0.0.0.0') {
        return FALSE;
      }
    }

    // Using a star
    if ($star !== false) {
      $start = long2ip(ip2long(str_replace('*', '0', $network)));
      $end   = long2ip(ip2long(str_replace('*', '255', $network)));
      if ($start === '0.0.0.0' || $end === '0.0.0.0') {
        return FALSE;
      }
    }

    // Using a dash
    if ($dash !== FALSE) {
      list($start, $end) = explode('-', $network);

      // Check whether $end is a full IP or just the last quad
      if (strpos($end, '.') !== FALSE) {
        $end = long2ip(ip2long(trim($end)));
      } else {
        // Get the first 3 quads of the start address
        $classc = substr($start, 0, strrpos($start, '.'));
        $classc .= '.' . $end;
        $end = long2ip(ip2long(trim($classc)));
      }

      // Check for failure
      $start = long2ip(ip2long(trim($start)));
      if ($start === '0.0.0.0' || $end === '0.0.0.0') {
        return FALSE;
      }
    }
  }

  return array($start, $end);
}
